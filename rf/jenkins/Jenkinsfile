#!/usr/bin/env groovy
/**
 * The purpose of this script is to enable the scheduled run of automated test cases. <br/>
 *
 */

import groovy.transform.Field

def jiraUrl = "https://coe-auto.atlassian.net"
def apiVersion = "3"
def xrayUrl = "https://xray.cloud.xpand-it.com"
def xrayVersion = "v2"

def itTest = 10005
def itTestSet = 10006
def itTestPlan = 10007
def itTestExc = 10008

def testSetStat = "In+Progress"
def testSetLbl = "ROBOT,Computers"
def testPlanStat = "In+Progress"
def testPlanLbl = "A_NOPC_COMP,ROBOT"

def testTypes = ["REST", "WebUI"]
def testSubTypes = ["Computers", "Smoke"]
def testSubSubTypes = ["All", "Desktops", "Notebooks", "Software"]
def jiraSystemKeys = ["NOPC"]
def jiraProjectKeys = ["NOPC": "NOPCommerce"]
def jiraProjectKey = "" // will be set later
def testPrefixes = ["NOPC": "NOPC"]

// set reference to a separate variable to allow access to pipeline steps container from within closure execution
def me = this

/**
 * Credentials
 */
final def JiraCredentials = "XRAY"


def parameterList = []
def testPlans = []
def testSets = []

node('master') {
    withCredentials([usernamePassword(credentialsId: JiraCredentials, usernameVariable: 'JIRA_USER', passwordVariable: 'JIRA_PASSWORD')]) {
        def projects = jiraProjectKeys.values().unique()
        projects.each({project ->
            // Get the actual Test Plan to assign Test Executions to
            curlCmd = "curl -u \${JIRA_USER}:\${JIRA_PASSWORD} -X GET -H 'Content-Type: application/json' ${jiraUrl}/rest/api/${apiVersion}/search?jql=project%3D%22${project}%22+AND+issuetype%3D%22${itTestPlan}%22+AND+status+in+%28%27${testPlanStat}%27%29+AND+labels+in+%28${testPlanLbl}%29"
            println "Command executed: ${curlCmd}"
            def curlResult = sh(returnStdout: true, script: curlCmd).trim()
            def jsonSlurper = new groovy.json.JsonSlurper()
            def curlResultObject = jsonSlurper.parseText("" + curlResult)
            def testPlanList = curlResultObject.issues.collect { it.key }
            testPlans.addAll(testPlanList)
            println "Test Plan is ${testPlans}"
        })
        def projects2 = jiraProjectKeys.values().unique()
        projects2.each({project ->
            // Get all test sets out of Jira/XRay that has a specific label and are ready for execution
            curlCmd2 = "curl -u \${JIRA_USER}:\${JIRA_PASSWORD} -X GET -H 'Content-Type: application/json' ${jiraUrl}/rest/api/${apiVersion}/search?jql=project%3D%22${project}%22+AND+type%3D%22${itTestSet}%22+AND+labels+in+%28${testSetLbl}%29+AND+status+in+%28%27${testSetStat}%27%29"
            println "Command executed: ${curlCmd2}"
            def curlResult2 = sh(returnStdout: true, script: curlCmd2).trim()
            def jsonSlurper2 = new groovy.json.JsonSlurper()
            def curlResultObject2 = jsonSlurper2.parseText("" + curlResult2)
            def testSetList = curlResultObject2.issues.collect { it.key + ": " + it.fields.summary }
            testSets.addAll(testSetList)
            println "Test Sets are ${testSets}"
        })


    parameterList.push(
        booleanParam(name: 'READ_CONFIG_ONLY', defaultValue: false, description: "If checked, the pipeline will be skipped and only the param config is recreated. The service fields and test sets are recreated with current values.")
    )
    parameterList.push(
        booleanParam(name: 'SEND_EMAIL', defaultValue: false, description: "Should an e-mail be sent to specific users?")
    )
    parameterList.push(
        booleanParam(name: 'UPDATE_XRAY', defaultValue: false, description: "Should the test results imported into a test execution and the test plan updated?")
    )
    parameterList.push(
        choice(name: 'TEST_PLAN', choices: testPlans, description: "Test Plan from XRay.")
    )
    parameterList.push(
        choice(name: 'TEST_TYPE', choices: testTypes, description: "What kind of tests should be executed via Robot Framework?")
    )
    parameterList.push(
        choice(name: 'TEST_STYPE', choices: testSubTypes, description: "What kind of sub tests should be executed via Robot Framework?")
    )
    parameterList.push(
        choice(name: 'TEST_SSTYPE', choices: testSubSubTypes, description: "What kind of sub sub tests should be executed via Robot Framework?")
    )
    parameterList.push(
        choice(name: 'TEST_SET', choices: testSets, description: "Test Set from XRay. If not all test sets are shown, please run the pipeline once with READ_CONFIG checked.")
    )
    }
}
properties ([
  parameters(
        parameterList
  )
])

// pipeline state variables
def abortedPipeline = false
def testIds = ''
def enableSendMail = false
def enableUpdateXray = false
def resultDir = ""
def testdefDir = ""
def authDir = ""

pipeline {
agent any
    options {
        buildDiscarder(logRotator(numToKeepStr: '20', daysToKeepStr: '7'))
        timeout(time: 100, unit: 'MINUTES')
        disableConcurrentBuilds()
        // timestamps ()
    }
    environment {
        ACCESS_KEY = credentials("${JiraCredentials}")
    }
	stages {
		stage ("Test Setup"){
            when {
                expression {
                    !abortedPipeline
                }
            }
            steps {
                script {
                    if (params.READ_CONFIG_ONLY) {
                        echo "Skipping pipeline and just getting information from Jira/XRay"
                        abortedPipeline = true
                    } else {
                        echo "Preparing test execution..."
                        enableSendMail = params.SEND_EMAIL
                    }
                }
            }
		}
		stage ("Run Test Cases") {
            when {
                expression {
                    !abortedPipeline
                }
            }
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                script {
                    echo "Run Robot Framework test cases"
                    def testTypeKey = params.TEST_TYPE
                    def testSTypeKey = params.TEST_STYPE
                    def testSSTypeKey = params.TEST_SSTYPE
                    def tagName = params.TEST_SET
                    resultDir = "rf/results/${testTypeKey}/${testSTypeKey}/${BUILD_TAG}"
                    testdefDir = "rf/testdefinition/${testSTypeKey}/${testTypeKey}"
                    // sh "chmod 755 rf/scripts/run_RF_Test_Cases.sh"
                    echo "./rf/scripts/run_RF_Test_Cases.bat ${resultDir} ${testdefDir} ${tagName}"
                    sh "./rf/scripts/run_RF_Test_Cases.bat ${resultDir} ${testdefDir} ${tagName}"
                    }
                }
            }
		}
		stage ("Public test results") {
            when {
                expression {
                    !abortedPipeline
                }
            }
		    steps {
                step([
                   $class : 'RobotPublisher',
                   outputPath : "${resultDir}",
                   logFileName : "log.html",
                   reportFileName : "report.html",
                   outputFileName : "output.xml",
                   disableArchiveOutput : false,
                   passThreshold : 100,
                   unstableThreshold: 95.0,
                   otherFiles : "*.png",
                   ])
		    }
		}
		stage ("Update Xray") {
            when {
                expression {
                    !abortedPipeline
                }
            }
            steps {
                script {
                    if (params.UPDATE_XRAY) {
                        echo 'Importing test results into test execution'
                        echo '=========================================='
                        def testProject = jiraSystemKeys.get(0)
                        def testProjectParam = "projectKey=${testProject}"
                        def testPlan = testPlans.get(0)
                        def testPlanParam = "testPlanKey=${testPlan}"
                        def testEnvironment = ""
                        def testEnvParam = "testEnvironment=${testEnvironment}"
                        // call REST-API
                        def curlCmd = "curl -u ${me.env.ACCESS_KEY} -F file=@'${resultDir}/output.xml' '${jiraUrl}/rest/raven/${xrayVersion}/import/execution/robot?${testProjectParam}&${testPlanParam}&${testEnvParam}'"
                        def curlResult = sh(returnStdout: true, script: curlCmd).trim()
                        echo "Result: ${curlResult}"
                    } else {
                        echo "Updating Xray will be skipped!"
                    }
                }
            }
		}
	}
	post {
	    always {
            echo 'I will always say Hello again!'
	    }
	    aborted {
            echo 'Pipeline aborted'
	    }
	    failure {
            echo 'Pipeline failure'
	    }
	    cleanup {
            echo 'Pipeline cleanup'
	    }
	    success {
            echo 'Pipeline success'
	    }
	}
}